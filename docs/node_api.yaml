openapi: 3.0.0
info:
  description: |
    Node API for communication between worker and server.
  version: 1.0.0
  title: Node API
tags:
- name: node
- name: NodeSession
paths:
  /nodes:
    post:
      summary: Register a new permanent node.
      operationId: CreateNode
      tags:
      - node
      parameters:
        - in: query
          name: node_key
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Node"
          application/x-www-form-urlencoded:
            schema:
              type: object
              properties:
                tags:
                  type: array
                  items:
                    type: string

      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref:  "#/components/schemas/Node"
        400:
          description: Invalid parameter.
        401:
          description: Unauthenticated request.
  /nodes/{nodeId}:
    get:
      tags:
      - node
      parameters:
      - in: path
        name: nodeId
        required: true
        schema:
          type: integer
          format: int64
      responses:
        200:
          description: Successful Response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Node"
  /nodeSessions:
    post:
      tags:
      - node
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NodeSession'
      responses:
        200:
          description: Sucessful Result
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NodeSession"
        401:
          description: Unauthenticated request.
        409:
          description: |
            There are some NodeSession living already relates to the
            target Node.


  /nodeSessions/{nodeSessionId}:heartbeat:
    post:
      tags:
        - node
      parameters:
        - in: path
          name: nodeSessionId
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                running_job_ids:
                  type: array
                  items:
                    type: string
      responses:
        200:
          description: Successful Result
          content:
            application/json:
              schema:
                type: object
                properties:
                  new_job_available:
                    type: boolean
                  kill_job_ids:
                    type: array
                    items:
                      type: string
        401:
          description: Unauthenticated request
  /nodeSessions/{node_session_id}/jobs:obtain:
    post:
      operationId: ObtainNodeSessionJob
      description: Pull a new job which current Node is qualified to run.
      responses:
        200:
          description: new job obtained
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NodeSessionJob"
        404:
          description: No job available
        401:
          description: Authentication failed or NodeSession is not existing.
  /nodeSessions/{node_session_id}/jobs/{job_id}/egg:
    get:
      operationId: GetNodeSessionJobEgg
      description: Get NodeSession's job egg file
      parameters:
        - in: path
          name: node_session_id
          schema:
            type: integer
            format: int64
        - in: path
          name: job_id
          schema:
            type: string
      responses:
        200:
          description: The egg binary file
          content:
            application/octet-stream:
              schema:
                type: string
                format: binary


components:
  schemas:
    Node:
      type: object
      required:
      - node_key
      properties:
        name:
          type: string
          readOnly: true
          example: nodes/*
        id:
          type: integer
          format: int64
          readOnly: true
        display_name:
          type: string
          readOnly: true
        tags:
          type: array
          items:
            type: string
        is_online:
          type: boolean
          readOnly: true
        client_ip:
          type: string
          readOnly: true
    NodeSession:
      type: object
      properties:
        name:
          type: string
          example: 'nodeSessions/*'
          readOnly: true
        id:
          type: integer
          format: int64
          readOnly: true
        node_id:
          type: integer
          format: int64
    NodeSessionJob:
      type: object
      properties:
        name:
          type: string
          example: 'nodeSessions/*/jobs/*'
          readOnly: true
        id:
          type: string
        figure:
          type: string
          description: the job's figure in json format

servers:
  - url: http://localhost:6800/v1
